# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Customer {
  customerId: Float!
  name: String!
  phone: String!
  balance: String!
  status: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedCustomers {
  data: [Customer!]!
  total: Int!
}

type Supplier {
  supplierId: Float!
  name: String!
  phone: String!
  balance: String!
  status: String!
  createdAt: DateTime!
}

type PaginatedSuppliers {
  data: [Supplier!]!
  total: Int!
}

type Brand {
  brandId: Int!
  name: String!
  status: String!
  createdAt: DateTime!
}

type PaginatedBrands {
  data: [Brand!]!
  total: Int!
}

type Category {
  categoryId: Int!
  name: String!
  brandAssigned: String
  status: String!
  createdAt: DateTime!
}

type PaginatedCategories {
  data: [Category!]!
  total: Int!
}

type Product {
  productId: Int!
  name: String!
  categoryAssigned: String!
  price: Float!
  pieces: Int!
  status: String!
  createdAt: DateTime!
}

type PaginatedProducts {
  data: [Product!]!
  total: Int!
}

type Variation {
  variationId: Int!
  name: String!
  productAssigned: String!
  pieces: Float!
  price: Float!
  status: String!
  createdAt: DateTime!
}

type PaginatedVariations {
  data: [Variation!]!
  total: Int!
}

type SaleItem {
  productId: Int
  productName: String
  ctn: Int
  pieces: Int
  quantity: Int
  price: Float
  total: Float
}

type Sale {
  saleId: Int!
  customerId: Int!
  invoiceNo: String!
  date: String!
  status: String!
  createdAt: DateTime!
  paymentMethod: String!
  notes: String
  total: Float!
  items: [SaleItem!]
}

type PaginatedSales {
  data: [Sale!]!
  total: Int!
}

type Query {
  customers: [Customer!]!
  customerByPhone(phone: String!): Customer!
  customersPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedCustomers!
  suppliers: [Supplier!]!
  supplierByPhone(phone: String!): Supplier!
  suppliersPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedSuppliers!
  brands: [Brand!]!
  brandsPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedBrands!
  categories: [Category!]!
  categoriesPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedCategories!
  products: [Product!]!
  productsPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedProducts!
  variations: [Variation!]!
  variationsPaginated(page: Int!, limit: Int!, search: String, status: String, startDate: String, endDate: String): PaginatedVariations!
  sales: [Sale!]!
  saleById(saleId: Int!): Sale!
  getSalesPaginated(page: Int!, limit: Int!, search: String, status: String, paymentMethod: String, startDate: String, endDate: String, filters: [FilterInput!], sort: SortInput): PaginatedSales!
}

input FilterInput {
  field: String!
  operator: String!
  value: String!
}

input SortInput {
  field: String!
  direction: String!
}

type Mutation {
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  updateCustomer(customerId: Int!, updateCustomerInput: CreateCustomerInput!): Customer!
  removeCustomer(customerId: Int!): Customer!
  createSupplier(createSupplierInput: CreateSupplierInput!): Supplier!
  updateSupplier(supplierId: Int!, updateSupplierInput: CreateSupplierInput!): Supplier!
  removeSupplier(supplierId: Int!): Supplier!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  updateBrand(brandId: Int!, updateBrandInput: CreateBrandInput!): Brand!
  removeBrand(brandId: Int!): Brand!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(categoryId: Int!, updateCategoryInput: CreateCategoryInput!): Category!
  removeCategory(categoryId: Int!): Category!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(productId: Int!, updateProductInput: CreateProductInput!): Product!
  removeProduct(productId: Int!): Product!
  createVariation(createVariationInput: CreateVariationInput!): Variation!
  updateVariation(variationId: Int!, updateVariationInput: CreateVariationInput!): Variation!
  removeVariation(variationId: Int!): Variation!
  createSale(createSaleInput: CreateSaleInput!): Sale!
  updateSale(saleId: Int!, updateSaleInput: UpdateSaleInput!): Sale!
  removeSale(saleId: Int!): Sale!
}

input CreateCustomerInput {
  name: String!
  phone: String!
  balance: String!
  status: String!
}

input CreateSupplierInput {
  name: String!
  phone: String!
  balance: String!
  status: String!
}

input CreateBrandInput {
  name: String!
  status: String!
}

input CreateCategoryInput {
  name: String!
  brandAssigned: String
  status: String!
}

input CreateProductInput {
  name: String!
  categoryAssigned: String!
  price: Float!
  pieces: Int!
  status: String!
}

input CreateVariationInput {
  name: String!
  productAssigned: String!
  pieces: Float!
  price: Float!
  status: String!
}

input CreateSaleInput {
  customerId: Int!
  date: String!
  status: String!
  paymentMethod: String!
  notes: String
  total: Float!
  items: [SaleItemInput!]!
}

input SaleItemInput {
  productId: Int
  productName: String!
  ctn: Int!
  pieces: Int!
  quantity: Int!
  price: Float!
  total: Float!
}

input UpdateSaleInput {
  customerId: Int
  invoiceNo: String
  date: String
  status: String
  paymentMethod: String
  notes: String
  total: Float
  items: [UpdateSaleItemInput!]
}

input UpdateSaleItemInput {
  productId: Int
  productName: String
  ctn: Int
  pieces: Int
  quantity: Int
  price: Float
  total: Float
}